
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionMethodEnum {
  get     @map("get")
  put     @map("put")
  post    @map("post")
  patch   @map("patch")
  delete  @map("delete")

  @@map("action_method")
}

enum SellingStatusEnum {
  created    @map("created")
  accepted   @map("accepted")
  declined   @map("declined")
  cancelled  @map("cancelled")

  @@map("selling_status")
}

model StaffModel {
  id         String     @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  token      String     @map("token")       @db.VarChar()    @default("")  
  phone      String     @map("phone")       @db.VarChar(12)  
  password   String     @map("password")    @db.VarChar()   
  fullname   String     @map("full_name")   @db.VarChar()    @default("")
  createdAt  DateTime   @map("created_at")  @db.Timestamptz  @default(dbgenerated("NOW()"))
  updatedAt  DateTime   @map("updated_at")  @db.Timestamptz  @updatedAt
  deletedAt  DateTime?  @map("deleted_at")  @db.Timestamptz

  actions   ActionModel[]
  sellings  SellingModel[]
  payments  PaymentModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ phone, fullname ])
  @@map("staff")
}

model ClientModel {
  id         String     @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  phone      String     @map("phone")       @db.VarChar(12)  
  fullname   String     @map("full_name")   @db.VarChar()    @default("")
  createdAt  DateTime   @map("created_at")  @db.Timestamptz  @default(dbgenerated("NOW()"))
  updatedAt  DateTime   @map("updated_at")  @db.Timestamptz  @updatedAt
  deletedAt  DateTime?  @map("deleted_at")  @db.Timestamptz

  sellings  SellingModel[]
  payments  PaymentModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ phone, fullname ])
  @@map("client")
}

model RoleModel {
  id         String    @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String    @map("name")        @db.VarChar()
  createdAt  DateTime  @map("created_at")  @db.Timestamptz  @default(dbgenerated("NOW()"))

  actions  ActionModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ name ])
  @@map("role")
}

model ActionModel {
  id           String            @map("id")           @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  url          String            @map("url")          @db.VarChar()
  name         String            @map("name")         @db.VarChar()
  description  String            @map("description")  @db.VarChar()  @default("")
  method       ActionMethodEnum  

  roles   RoleModel[]
  staffs  StaffModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ url, name, method ])
  @@map("action")
}

model StorehouseModel {
  id         String    @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String    @map("name")        @db.VarChar()
  position   Int       @map("position")    @db.Integer     
  hexColor   String    @map("hex_color")   @db.VarChar()    @default("0000000")
  createdAt  DateTime  @map("created_at")  @db.Timestamptz  @default(dbgenerated("NOW()"))
  updatedAt  DateTime  @map("updated_at")  @db.Timestamptz  @updatedAt

  products  ProductToStorehouseModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ name ])
  @@map("storehouse")
}

model ProductModel {
  id                String     @map("id")                 @db.Uuid          @default(dbgenerated("GEN_RANDOM_UUID()"))
  name              String     @map("name")               @db.VarChar()     
  cost              BigInt     @map("cost")               @db.BigInt        @default(0)
  price             BigInt     @map("price")              @db.BigInt        @default(0) 
  quantity          Int        @map("quantity")           @db.Integer       @default(1)
  image             String     @map("image")              @db.VarChar(255)  @default("")
  warningThreshold  Int        @map("warning_threshold")  @db.Integer       
  barcodeId         String     @map("barcode_id")         @db.Uuid          
  createdAt         DateTime   @map("created_at")         @db.Timestamptz   @default(dbgenerated("NOW()"))
  updatedAt         DateTime   @map("updated_at")         @db.Timestamptz   @updatedAt
  deletedAt         DateTime?  @map("deleted_at")         @db.Timestamptz

  barcode  BarcodeModel  @relation(fields: [ barcodeId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  storehouses  ProductToStorehouseModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ name ])
  @@map("product")
}

model BarcodeModel {
  id    String  @map("id")       @db.Uuid     @default(dbgenerated("GEN_RANDOM_UUID()"))
  code  Int     @map("barcode")  @db.Integer  @default(500000)
  
  products  ProductModel[]
  
  @@id([ id ])
  @@unique([ code ])
  @@map("barcode")
}

model ProductToStorehouseModel {
  id            String    @map("id")             @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  quantity      Int       @map("quantity")       @db.Integer      @default(0)
  productId     String    @map("product_id")     @db.Uuid
  storehouseId  String    @map("storehouse_id")  @db.Uuid
  createdAt     DateTime  @map("created_at")     @db.Timestamptz  @default(dbgenerated("NOW()"))

  product     ProductModel     @relation(fields: [ productId    ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  storehouse  StorehouseModel  @relation(fields: [ storehouseId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  sellings  SellingProductModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ productId, storehouseId ])
  @@map("product_storehouse")
}

model PaymentModel {
  id           String    @map("id")           @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  other        BigInt    @map("other")        @db.BigInt       @default(0)
  card         BigInt    @map("card")         @db.BigInt       @default(0)
  cash         BigInt    @map("cash")         @db.BigInt       @default(0)
  staffId      String    @map("staff_id")     @db.Uuid  
  sellingId    String?   @map("selling_id")   @db.Uuid  
  clientId     String?   @map("client_id")    @db.Uuid  
  description  String    @map("description")  @db.VarChar()    @default("")
  createdAt    DateTime  @map("created_at")   @db.Timestamptz  @default(dbgenerated("NOW()"))


  staff    StaffModel     @relation(fields: [ staffId   ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  client   ClientModel?   @relation(fields: [ clientId  ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  selling  SellingModel?  @relation(fields: [ sellingId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@index([ id ])
  @@map("payment")
}

model SellingModel {
  id                String             @map("id")                 @db.Uuid           @default(dbgenerated("GEN_RANDOM_UUID()"))
  status            SellingStatusEnum                             @default(created)  
  staffId           String             @map("staff_id")           @db.Uuid
  clientId          String?            @map("client_id")          @db.Uuid
  totalSum          BigInt             @map("total_sum")          @db.BigInt         @default(0)  
  createdAt         DateTime           @map("created_at")         @db.Timestamptz    @default(dbgenerated("NOW()"))

  staff   StaffModel    @relation(fields: [ staffId  ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  client  ClientModel?  @relation(fields: [ clientId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  payments  PaymentModel[]
  products  SellingProductModel[]

  @@id([ id ])
  @@index([ id ])
  @@map("selling")
}

model SellingProductModel {
  id                   String  @map("id")                     @db.Uuid     @default(dbgenerated("GEN_RANDOM_UUID()"))
  sellingId            String  @map("selling_id")             @db.Uuid
  quantity             Int     @map("quantity")               @db.Integer
  productStorehouseId  String  @map("storehouse_product_id")  @db.Uuid
  
  selling            SellingModel              @relation(fields: [ sellingId            ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  productStorehouse  ProductToStorehouseModel  @relation(fields: [ productStorehouseId  ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("selling_product")
}